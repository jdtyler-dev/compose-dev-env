"use strict";
/*!
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Resource = exports.Project = exports.LifecycleState = void 0;
const common_1 = require("@google-cloud/common");
const paginator_1 = require("@google-cloud/paginator");
const promisify_1 = require("@google-cloud/promisify");
const project_1 = require("./project");
Object.defineProperty(exports, "Project", { enumerable: true, get: function () { return project_1.Project; } });
var LifecycleState;
(function (LifecycleState) {
    /**
     * 	Unspecified state. This is only used/useful for distinguishing unset
     * values.
     */
    LifecycleState[LifecycleState["LIFECYCLE_STATE_UNSPECIFIED"] = 0] = "LIFECYCLE_STATE_UNSPECIFIED";
    /**
     * 	The normal and active state.
     */
    LifecycleState[LifecycleState["ACTIVE"] = 1] = "ACTIVE";
    /**
     * 	The project has been marked for deletion by the user (by invoking
     * projects.delete) or by the system (Google Cloud Platform). This can
     * generally be reversed by invoking projects.undelete.
     */
    LifecycleState[LifecycleState["DELETE_REQUESTED"] = 2] = "DELETE_REQUESTED";
    /**
     * 	This lifecycle state is no longer used and not returned by the API.
     */
    LifecycleState[LifecycleState["DELETE_IN_PROGRESS"] = 3] = "DELETE_IN_PROGRESS";
})(LifecycleState = exports.LifecycleState || (exports.LifecycleState = {}));
/**
 * The [Cloud Resource Manager](https://cloud.google.com/resource-manager/)
 * provides methods that you can use to programmatically manage your projects
 * in the Google Cloud Platform. With this API, you can do the following:
 *
 *   - Get a list of all projects associated with an account.
 *   - Create new projects.
 *   - Update existing projects.
 *   - Delete projects.
 *   - Recover projects.
 *
 * @class
 *
 * @see [What is the Cloud Resource Manager?]{@link https://cloud.google.com/resource-manager}
 *
 * @param {ClientConfig} [options] Configuration options.
 *
 * @example <caption>Import the client library</caption>
 * const {Resource} = require('@google-cloud/resource');
 *
 * @example <caption>Create a client that uses <a
 * href="https://cloud.google.com/docs/authentication/production#providing_credentials_to_your_application">Application
 * Default Credentials (ADC)</a>:</caption> const resource = new Resource();
 *
 * @example <caption>Create a client with <a
 * href="https://cloud.google.com/docs/authentication/production#obtaining_and_providing_service_account_credentials_manually">explicit
 * credentials</a>:</caption> const resource = new Resource({ projectId:
 * 'your-project-id', keyFilename: '/path/to/keyfile.json'
 * });
 *
 * @example <caption>include:samples/quickstart.js</caption>
 * region_tag:resource_quickstart
 * Full quickstart example:
 */
class Resource extends common_1.Service {
    constructor(options = {}) {
        options.apiEndpoint =
            options.apiEndpoint || 'cloudresourcemanager.googleapis.com';
        const config = {
            apiEndpoint: options.apiEndpoint,
            baseUrl: `https://${options.apiEndpoint}/v1`,
            scopes: ['https://www.googleapis.com/auth/cloud-platform'],
            projectIdRequired: false,
            packageJson: require('../../package.json'),
        };
        super(config, options);
        /**
         * Get a list of {@link Resource/project} objects as a readable object
         * stream.
         *
         * @param {object} query Configuration object. See
         *     {@link Resource#getProjects} for a complete list of options.
         * @return {stream}
         *
         * @example
         * const {Resource} = require('@google-cloud/resource');
         * const resource = new Resource();
         *
         * resource.getProjectsStream()
         *   .on('error', console.error)
         *   .on('data', project => {
         *     // `project` is a `Project` object.
         *   })
         *   .on('end', () => {
         *     // All projects retrieved.
         *   });
         *
         * //-
         * // If you anticipate many results, you can end a stream early to prevent
         * // unnecessary processing and API requests.
         * //-
         * resource.getProjectsStream()
         *   .on('data', function(project) {
         *     this.end();
         *   });
         */
        this.getProjectsStream = paginator_1.paginator.streamify('getProjects');
    }
    createProject(id, optionsOrCallback, callback) {
        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};
        callback =
            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;
        this.request({
            method: 'POST',
            uri: '/projects',
            json: Object.assign({}, options, {
                projectId: id,
            }),
        }, (err, resp) => {
            if (err) {
                callback(err, null, resp);
                return;
            }
            const project = this.project(resp.projectId);
            const operation = this.operation(resp.name);
            operation.metadata = resp;
            callback(null, project, operation, resp);
        });
    }
    getProjects(optionsOrCallback, callback) {
        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};
        callback =
            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;
        this.request({
            uri: '/projects',
            qs: options,
        }, (err, resp) => {
            if (err) {
                callback(err, null, null, resp);
                return;
            }
            let nextQuery;
            if (resp.nextPageToken) {
                nextQuery = Object.assign({}, options, {
                    pageToken: resp.nextPageToken,
                });
            }
            const projects = (resp.projects || []).map((project) => {
                const projectInstance = this.project(project.projectId);
                projectInstance.metadata = project;
                return projectInstance;
            });
            callback(null, projects, nextQuery, resp);
        });
    }
    /*! Developer Documentation
     *
     * @returns {module:common/operation}
     */
    /**
     * Get a reference to an existing operation.
     *
     * @throws {Error} If a name is not provided.
     *
     * @param {string} name The name of the operation.
     *
     * @example
     * const {Resource} = require('@google-cloud/resource');
     * const resource = new Resource();
     *
     * const operation = resource.operation('68850831366825');
     */
    operation(name) {
        if (!name) {
            throw new Error('A name must be specified for an operation.');
        }
        return new common_1.Operation({ parent: this, id: name });
    }
    /**
     * Create a Project object. See {@link Resource#createProject} to create
     * a project.
     *
     * @throws {Error} If an ID is not provided.
     *
     * @param {string} id The ID of the project (eg: `grape-spaceship-123`).
     * @return {Project}
     *
     * @example
     * const {Resource} = require('@google-cloud/resource');
     * const resource = new Resource();
     *
     * const project = resource.project('grape-spaceship-123');
     */
    project(id) {
        id = id || this.projectId;
        if (!id) {
            throw new Error('A project ID is required.');
        }
        return new project_1.Project(this, id);
    }
}
exports.Resource = Resource;
/*! Developer Documentation
 *
 * These methods can be auto-paginated.
 */
paginator_1.paginator.extend(Resource, ['getProjects']);
/*! Developer Documentation
 *
 * All async methods (except for streams) will return a Promise in the event
 * that a callback is omitted.
 */
promisify_1.promisifyAll(Resource, {
    exclude: ['operation', 'project'],
});
//# sourceMappingURL=index.js.map