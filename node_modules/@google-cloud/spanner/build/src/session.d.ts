/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * @module spanner/session
 */
declare const common: any;
import * as r from 'teeny-request';
import { Snapshot, Transaction, PartitionedDml, TimestampBounds } from './transaction';
import { google } from '../protos/protos';
import { Database } from './database';
import { NormalCallback } from './common';
import { grpc, CallOptions } from 'google-gax';
import IRequestOptions = google.spanner.v1.IRequestOptions;
export declare type GetSessionResponse = [Session, r.Response];
/**
 * enum to capture the possible session types
 */
export declare const enum types {
    ReadOnly = "readonly",
    ReadWrite = "readwrite"
}
export declare type GetSessionMetadataCallback = NormalCallback<google.spanner.v1.ISession>;
export declare type GetSessionMetadataResponse = [google.spanner.v1.ISession];
export declare type KeepAliveCallback = NormalCallback<google.spanner.v1.IResultSet>;
export declare type KeepAliveResponse = [google.spanner.v1.IResultSet];
export declare type DeleteSessionResponse = [google.protobuf.IEmpty];
export declare type DeleteSessionCallback = NormalCallback<google.protobuf.IEmpty>;
/**
 * Create a Session object to interact with a Cloud Spanner session.
 *
 * **It is unlikely you will need to interact with sessions directly. By
 * default, sessions are created and utilized for maximum performance
 * automatically.**
 *
 * @class
 * @param {Database} database Parent {@link Database} instance.
 * @param {string} [name] The name of the session. If not provided, it is
 *     assumed you are going to create it.
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 *
 * const instance = spanner.instance('my-instance');
 * const database = instance.database('my-database');
 *
 * //-
 * // To create a session manually, don't provide a name.
 * //-
 * const session = database.session();
 *
 * session.create(function(err) {
 *   if (err) {
 *     // Error handling omitted.
 *   }
 *
 *   // Session created successfully.
 *   // `session.id` = The name of the session.
 * });
 *
 * //-
 * // To access a previously-created session, provide a name.
 * //-
 * const session = database.session('session-name');
 */
export declare class Session extends common.GrpcServiceObject {
    id: string;
    formattedName_?: string;
    type?: types;
    txn?: Transaction;
    lastUsed?: number;
    lastError?: grpc.ServiceError;
    resourceHeader_: {
        [k: string]: string;
    };
    constructor(database: Database, name?: string);
    delete(gaxOptions?: CallOptions): Promise<DeleteSessionResponse>;
    delete(callback: DeleteSessionCallback): void;
    delete(gaxOptions: CallOptions, callback: DeleteSessionCallback): void;
    getMetadata(gaxOptions?: CallOptions): Promise<GetSessionMetadataResponse>;
    getMetadata(callback: GetSessionMetadataCallback): void;
    getMetadata(gaxOptions: CallOptions, callback: GetSessionMetadataCallback): void;
    keepAlive(gaxOptions?: CallOptions): Promise<KeepAliveResponse>;
    keepAlive(callback: KeepAliveCallback): void;
    keepAlive(gaxOptions: CallOptions, callback: KeepAliveCallback): void;
    /**
     * Create a PartitionedDml transaction.
     *
     * @returns {PartitionedDml}
     *
     * @example
     * const transaction = session.partitionedDml();
     */
    partitionedDml(): PartitionedDml;
    /**
     * Create a Snapshot transaction.
     *
     * @param {TimestampBounds} [options] The timestamp bounds.
     * @param {google.spanner.v1.ExecuteSqlRequest.IQueryOptions} [queryOptions] The default query options to use.
     * @returns {Snapshot}
     *
     * @example
     * const snapshot = session.snapshot({strong: false});
     */
    snapshot(options?: TimestampBounds, queryOptions?: google.spanner.v1.ExecuteSqlRequest.IQueryOptions): Snapshot;
    /**
     * Create a read write Transaction.
     *
     * @param {google.spanner.v1.ExecuteSqlRequest.IQueryOptions} [queryOptions] The default query options to use.
     * @return {Transaction}
     *
     * @example
     * const transaction = session.transaction();
     */
    transaction(queryOptions?: google.spanner.v1.ExecuteSqlRequest.IQueryOptions, requestOptions?: Pick<IRequestOptions, 'transactionTag'>): Transaction;
    /**
     * Format the session name to include the parent database's name.
     *
     * @private
     *
     * @param {string} databaseName The parent database's name.
     * @param {string} name The instance name.
     * @returns {string}
     *
     * @example
     * Session.formatName_('my-database', 'my-session');
     * // 'projects/grape-spaceship-123/instances/my-instance/' +
     * // 'databases/my-database/sessions/my-session'
     */
    static formatName_(databaseName: string, name: string): string;
}
export {};
