/**
 * Copyright 2020 Google LLC
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Instance } from './instance';
import { IOperation, LongRunningCallback, RequestCallback, ResourceCallback, NormalCallback } from './common';
import { EnumKey, RequestConfig, TranslateEnumKeys } from '.';
import { CallOptions, Metadata, Operation as GaxOperation } from 'google-gax';
import { PreciseDate } from '@google-cloud/precise-date';
import { google as databaseAdmin } from '../protos/protos';
import { common as p } from 'protobufjs';
export declare type CreateBackupCallback = LongRunningCallback<Backup>;
export interface CreateBackupGaxOperation extends GaxOperation {
    metadata: Metadata & databaseAdmin.spanner.admin.database.v1.ICreateBackupMetadata;
}
export declare type CreateBackupResponse = [Backup, CreateBackupGaxOperation, IOperation];
export interface CreateBackupOptions {
    databasePath: string;
    expireTime: string | number | p.ITimestamp | PreciseDate;
    versionTime?: string | number | p.ITimestamp | PreciseDate;
    encryptionConfig?: databaseAdmin.spanner.admin.database.v1.ICreateBackupEncryptionConfig;
    gaxOptions?: CallOptions;
}
/**
 * IBackup structure with backup state enum translated to string form.
 */
declare type IBackupTranslatedEnum = TranslateEnumKeys<databaseAdmin.spanner.admin.database.v1.IBackup, 'state', typeof databaseAdmin.spanner.admin.database.v1.Backup.State>;
export declare type GetMetadataResponse = [IBackupTranslatedEnum];
declare type GetMetadataCallback = RequestCallback<IBackupTranslatedEnum>;
declare type UpdateExpireTimeCallback = RequestCallback<databaseAdmin.spanner.admin.database.v1.IBackup>;
declare type DeleteCallback = RequestCallback<databaseAdmin.protobuf.IEmpty>;
interface BackupRequest {
    (config: RequestConfig, callback: ResourceCallback<GaxOperation, IOperation>): void;
    <T>(config: RequestConfig, callback: RequestCallback<T>): void;
}
export declare type GetStateCallback = NormalCallback<EnumKey<typeof databaseAdmin.spanner.admin.database.v1.Backup.State>>;
export declare type GetExpireTimeCallback = NormalCallback<PreciseDate>;
export declare type ExistsCallback = NormalCallback<boolean>;
/**
 * The {@link Backup} class represents a Cloud Spanner backup.
 *
 * Create a `Backup` object to interact with or create a Cloud Spanner backup.
 *
 * @class
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 * const instance = spanner.instance('my-instance');
 * const backup = instance.backup('my-backup');
 */
declare class Backup {
    id: string;
    formattedName_: string;
    instanceFormattedName_: string;
    resourceHeader_: {
        [k: string]: string;
    };
    request: BackupRequest;
    metadata?: databaseAdmin.spanner.admin.database.v1.IBackup;
    constructor(instance: Instance, name: string);
    create(options: CreateBackupOptions): Promise<CreateBackupResponse>;
    create(options: CreateBackupOptions, callback: CreateBackupCallback): void;
    getMetadata(gaxOptions?: CallOptions): Promise<GetMetadataResponse>;
    getMetadata(callback: GetMetadataCallback): void;
    getMetadata(gaxOptions: CallOptions, callback: GetMetadataCallback): void;
    getState(): Promise<EnumKey<typeof databaseAdmin.spanner.admin.database.v1.Backup.State> | undefined | null>;
    getState(callback: GetStateCallback): void;
    getExpireTime(): Promise<PreciseDate | undefined>;
    getExpireTime(callback: GetExpireTimeCallback): void;
    exists(): Promise<boolean>;
    exists(callback: ExistsCallback): void;
    updateExpireTime(expireTime: string | number | p.ITimestamp | PreciseDate): Promise<databaseAdmin.spanner.admin.database.v1.IBackup>;
    updateExpireTime(expireTime: string | number | p.ITimestamp | PreciseDate, gaxOptions?: CallOptions): Promise<databaseAdmin.spanner.admin.database.v1.IBackup>;
    updateExpireTime(expireTime: string | number | p.ITimestamp | PreciseDate, callback: UpdateExpireTimeCallback): void;
    updateExpireTime(expireTime: string | number | p.ITimestamp | PreciseDate, gaxOptions: CallOptions, callback: UpdateExpireTimeCallback): void;
    delete(gaxOptions?: CallOptions): Promise<databaseAdmin.protobuf.IEmpty>;
    delete(callback: DeleteCallback): void;
    delete(gaxOptions: CallOptions, callback: DeleteCallback): void;
    /**
     * Format the backup name to include the instance name.
     *
     * @private
     *
     * @param {string} instanceName The formatted instance name.
     * @param {string} name The table name.
     * @returns {string}
     *
     * @example
     * Backup.formatName_(
     *   'projects/grape-spaceship-123/instances/my-instance',
     *   'my-backup'
     * );
     * // 'projects/grape-spaceship-123/instances/my-instance/backups/my-backup'
     */
    static formatName_(instanceName: string, name: string): string;
}
/**
 * Reference to the {@link Backup} class.
 * @name module:@google-cloud/spanner.Backup
 * @see Backup
 */
export { Backup };
