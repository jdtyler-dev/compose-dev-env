/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { GetConfig } from '@google-cloud/common';
declare const common: any;
import { Database, SessionPoolConstructor } from './database';
import { Spanner, RequestConfig } from '.';
import { RequestCallback, PagedOptions, PagedResponse, LongRunningCallback, NormalCallback, ResourceCallback, PagedOptionsWithFilter } from './common';
import { Duplex } from 'stream';
import { SessionPoolOptions, SessionPool } from './session-pool';
import { Operation as GaxOperation, CallOptions } from 'google-gax';
import { Backup } from './backup';
import { google as instanceAdmin } from '../protos/protos';
import { google as databaseAdmin } from '../protos/protos';
import { google as spannerClient } from '../protos/protos';
import { CreateInstanceRequest } from './index';
export declare type IBackup = databaseAdmin.spanner.admin.database.v1.IBackup;
export declare type IDatabase = databaseAdmin.spanner.admin.database.v1.IDatabase;
export declare type IInstance = instanceAdmin.spanner.admin.instance.v1.IInstance;
export declare type IOperation = instanceAdmin.longrunning.IOperation;
export declare type CreateInstanceResponse = [Instance, GaxOperation, IOperation];
export declare type CreateDatabaseResponse = [Database, GaxOperation, IOperation];
export declare type DeleteInstanceResponse = [instanceAdmin.protobuf.IEmpty];
export declare type ExistsInstanceResponse = [boolean];
export declare type GetInstanceResponse = [Instance, IInstance];
export declare type GetInstanceMetadataResponse = [IInstance];
export interface GetInstanceMetadataOptions {
    fieldNames?: string | string[];
    gaxOptions?: CallOptions;
}
export declare type GetDatabasesResponse = PagedResponse<Database, databaseAdmin.spanner.admin.database.v1.IListDatabasesResponse>;
export declare type SetInstanceMetadataResponse = [GaxOperation, IOperation];
export declare type GetBackupsResponse = PagedResponse<Backup, databaseAdmin.spanner.admin.database.v1.IListBackupsResponse>;
export declare type GetBackupOperationsResponse = PagedResponse<IOperation, databaseAdmin.spanner.admin.database.v1.IListBackupOperationsResponse>;
export declare type GetDatabaseOperationsResponse = PagedResponse<IOperation, databaseAdmin.spanner.admin.database.v1.IListDatabaseOperationsResponse>;
export interface CreateDatabaseOptions extends databaseAdmin.spanner.admin.database.v1.ICreateDatabaseRequest {
    poolOptions?: SessionPoolOptions;
    poolCtor?: SessionPool;
    schema?: string;
    gaxOptions?: CallOptions;
}
export declare type GetDatabasesOptions = PagedOptions;
export declare type CreateInstanceCallback = LongRunningCallback<Instance>;
export declare type CreateDatabaseCallback = LongRunningCallback<Database>;
export declare type DeleteInstanceCallback = NormalCallback<instanceAdmin.protobuf.IEmpty>;
export declare type ExistsInstanceCallback = NormalCallback<boolean>;
export declare type GetDatabasesCallback = RequestCallback<Database, databaseAdmin.spanner.admin.database.v1.IListDatabasesResponse>;
export declare type GetInstanceCallback = ResourceCallback<Instance, IInstance>;
export declare type GetInstanceMetadataCallback = NormalCallback<IInstance>;
export declare type SetInstanceMetadataCallback = ResourceCallback<GaxOperation, IOperation>;
export declare type GetBackupsOptions = PagedOptionsWithFilter;
export declare type GetBackupsCallback = RequestCallback<Backup, databaseAdmin.spanner.admin.database.v1.IListBackupsResponse>;
export declare type GetBackupOperationsOptions = PagedOptionsWithFilter;
export declare type GetBackupOperationsCallback = RequestCallback<IOperation, databaseAdmin.spanner.admin.database.v1.IListBackupOperationsResponse>;
export declare type GetDatabaseOperationsOptions = PagedOptionsWithFilter;
export declare type GetDatabaseOperationsCallback = RequestCallback<IOperation, databaseAdmin.spanner.admin.database.v1.IListDatabaseOperationsResponse>;
export interface GetInstanceConfig extends GetConfig, CreateInstanceRequest, GetInstanceMetadataOptions {
}
interface InstanceRequest {
    (config: RequestConfig, callback: ResourceCallback<GaxOperation, IOperation>): void;
    <T>(config: RequestConfig, callback: RequestCallback<T>): void;
    <T, R>(config: RequestConfig, callback: RequestCallback<T, R>): void;
}
/**
 * The {@link Instance} class represents a [Cloud Spanner
 * instance](https://cloud.google.com/spanner/docs/instances).
 *
 * Create an `Instance` object to interact with a Cloud Spanner instance.
 *
 * @class
 *
 * @param {Spanner} spanner {@link Spanner} instance.
 * @param {string} name Name of the instance.
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 * const instance = spanner.instance('my-instance');
 */
declare class Instance extends common.GrpcServiceObject {
    formattedName_: string;
    request: InstanceRequest;
    requestStream: (config: RequestConfig) => Duplex;
    databases_: Map<string, Database>;
    metadata?: IInstance;
    resourceHeader_: {
        [k: string]: string;
    };
    constructor(spanner: Spanner, name: string);
    /**
     * Get a reference to a Backup object.
     *
     * @throws {Error} If any parameter is not provided.
     *
     * @param {string} backupId The name of the backup.
     * @return {Backup} A Backup object.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     * const instance = spanner.instance('my-instance');
     * const backup = instance.backup('my-backup');
     */
    backup(backupId: string): Backup;
    getBackups(options?: GetBackupsOptions): Promise<GetBackupsResponse>;
    getBackups(callback: GetBackupsCallback): void;
    getBackups(options: GetBackupsOptions, callback: GetBackupsCallback): void;
    /**
     * Get a list of backups as a readable object stream.
     *
     * Wrapper around {@link v1.DatabaseAdminClient#listBackups}.
     *
     * @see {@link v1.DatabaseAdminClient#listBackups}
     * @see [ListBackups API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.database.v1#google.spanner.admin.database.v1.DatabaseAdmin.ListBackups)
     *
     * @method Spanner#getBackupsStream
     * @param {GetBackupOptions} [options] Query object for listing backups.
     * @returns {ReadableStream} A readable stream that emits {@link Backup}
     *     instances.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.getBackupsStream()
     *   .on('error', console.error)
     *   .on('data', function(database) {
     *     // `backups` is a `Backup` object.
     *   })
     *   .on('end', function() {
     *     // All backups retrieved.
     *   });
     *
     * //-
     * // If you anticipate many results, you can end a stream early to prevent
     * // unnecessary processing and API requests.
     * //-
     * instance.getBackupsStream()
     *   .on('data', function(database) {
     *     this.end();
     *   });
     */
    getBackupsStream(options?: GetBackupsOptions): NodeJS.ReadableStream;
    getBackupOperations(options?: GetBackupOperationsOptions): Promise<GetBackupOperationsResponse>;
    getBackupOperations(callback: GetBackupOperationsCallback): void;
    getBackupOperations(options: GetBackupOperationsOptions, callback: GetBackupOperationsCallback): void;
    getDatabaseOperations(options?: GetDatabaseOperationsOptions): Promise<GetDatabaseOperationsResponse>;
    getDatabaseOperations(callback: GetDatabaseOperationsCallback): void;
    getDatabaseOperations(options: GetDatabaseOperationsOptions, callback: GetDatabaseOperationsCallback): void;
    createDatabase(name: string, options?: CreateDatabaseOptions): Promise<CreateDatabaseResponse>;
    createDatabase(name: string, callback: CreateDatabaseCallback): void;
    createDatabase(name: string, options: CreateDatabaseOptions, callback: CreateDatabaseCallback): void;
    /**
     * Get a reference to a Database object.
     *
     * @throws {Error} If a name is not provided.
     *
     * @param {string} name The name of the instance.
     * @param {SessionPoolOptions|SessionPoolCtor} [poolOptions] Session pool
     *     configuration options.
     * @param {spannerClient.spanner.v1.ExecuteSqlRequest.IQueryOptions} [queryOptions]
     *     Default query options to use with the database. These options will be
     *     overridden by any query options set in environment variables or that
     *     are specified on a per-query basis.
     * @return {Database} A Database object.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     * const database = instance.database('my-database');
     */
    database(name: string, poolOptions?: SessionPoolOptions | SessionPoolConstructor, queryOptions?: spannerClient.spanner.v1.ExecuteSqlRequest.IQueryOptions): Database;
    delete(gaxOptions?: CallOptions): Promise<DeleteInstanceResponse>;
    delete(callback: DeleteInstanceCallback): void;
    delete(gaxOptions: CallOptions, callback: DeleteInstanceCallback): void;
    exists(gaxOptions?: CallOptions): Promise<ExistsInstanceResponse>;
    exists(callback: ExistsInstanceCallback): void;
    exists(gaxOptions: CallOptions, callback: ExistsInstanceCallback): void;
    get(options?: GetInstanceConfig): Promise<GetInstanceResponse>;
    get(callback: GetInstanceCallback): void;
    get(options: GetInstanceConfig, callback: GetInstanceCallback): void;
    getDatabases(options?: GetDatabasesOptions): Promise<GetDatabasesResponse>;
    getDatabases(callback: GetDatabasesCallback): void;
    getDatabases(options: GetDatabasesOptions, callback: GetDatabasesCallback): void;
    /**
     * Get a list of databases as a readable object stream.
     *
     * Wrapper around {@link v1.DatabaseAdminClient#listDatabases}.
     *
     * @see {@link v1.DatabaseAdminClient#listDatabases}
     * @see [ListDatabases API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.admin.database.v1#google.spanner.admin.database.v1.DatabaseAdmin.ListDatabases)
     *
     * @method Spanner#getDatabasesStream
     * @param {GetDatabasesOptions} [options] Query object for listing databases.
     * @returns {ReadableStream} A readable stream that emits {@link Database}
     *     instances.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     *
     * instance.getDatabasesStream()
     *   .on('error', console.error)
     *   .on('data', function(database) {
     *     // `database` is a `Database` object.
     *   })
     *   .on('end', function() {
     *     // All databases retrieved.
     *   });
     *
     * //-
     * // If you anticipate many results, you can end a stream early to prevent
     * // unnecessary processing and API requests.
     * //-
     * instance.getDatabasesStream()
     *   .on('data', function(database) {
     *     this.end();
     *   });
     */
    getDatabasesStream(options?: GetDatabasesOptions): NodeJS.ReadableStream;
    getMetadata(options?: GetInstanceMetadataOptions): Promise<GetInstanceMetadataResponse>;
    getMetadata(callback: GetInstanceMetadataCallback): void;
    getMetadata(options: GetInstanceMetadataOptions, callback: GetInstanceMetadataCallback): void;
    setMetadata(metadata: IInstance, gaxOptions?: CallOptions): Promise<SetInstanceMetadataResponse>;
    setMetadata(metadata: IInstance, callback: SetInstanceMetadataCallback): void;
    setMetadata(metadata: IInstance, gaxOptions: CallOptions, callback: SetInstanceMetadataCallback): void;
    /**
     * Format the instance name to include the project ID.
     *
     * @private
     *
     * @param {string} projectId The project ID.
     * @param {string} name The instance name.
     * @returns {string}
     *
     * @example
     * Instance.formatName_('grape-spaceship-123', 'my-instance');
     * // 'projects/grape-spaceship-123/instances/my-instance'
     */
    static formatName_(projectId: string, name: string): string;
}
/**
 * Reference to the {@link Instance} class.
 * @name module:@google-cloud/spanner.Instance
 * @see Instance
 */
export { Instance };
