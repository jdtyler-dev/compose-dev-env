/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Operation as GaxOperation, CallOptions } from 'google-gax';
import { Database, UpdateSchemaCallback, UpdateSchemaResponse } from './database';
import { PartialResultStream } from './partial-result-stream';
import { ReadRequest, TimestampBounds, CommitOptions, CommitResponse, ReadResponse, ReadCallback, CommitCallback } from './transaction';
import { google as databaseAdmin } from '../protos/protos';
import { Schema, LongRunningCallback } from './common';
import IRequestOptions = databaseAdmin.spanner.v1.IRequestOptions;
export declare type Key = string | string[];
export declare type CreateTableResponse = [Table, GaxOperation, databaseAdmin.longrunning.IOperation];
export declare type CreateTableCallback = LongRunningCallback<Table>;
export declare type DropTableResponse = UpdateSchemaResponse;
export declare type DropTableCallback = UpdateSchemaCallback;
interface MutateRowsOptions extends CommitOptions {
    requestOptions?: Omit<IRequestOptions, 'requestTag'>;
}
export declare type DeleteRowsCallback = CommitCallback;
export declare type DeleteRowsResponse = CommitResponse;
export declare type DeleteRowsOptions = MutateRowsOptions;
export declare type InsertRowsCallback = CommitCallback;
export declare type InsertRowsResponse = CommitResponse;
export declare type InsertRowsOptions = MutateRowsOptions;
export declare type ReplaceRowsCallback = CommitCallback;
export declare type ReplaceRowsResponse = CommitResponse;
export declare type ReplaceRowsOptions = MutateRowsOptions;
export declare type UpdateRowsCallback = CommitCallback;
export declare type UpdateRowsResponse = CommitResponse;
export declare type UpdateRowsOptions = MutateRowsOptions;
export declare type UpsertRowsCallback = CommitCallback;
export declare type UpsertRowsResponse = CommitResponse;
export declare type UpsertRowsOptions = MutateRowsOptions;
/**
 * Create a Table object to interact with a table in a Cloud Spanner
 * database.
 *
 * @class
 *
 * @param {Database} database {@link Database} instance.
 * @param {string} name Name of the table.
 *
 * @example
 * const {Spanner} = require('@google-cloud/spanner');
 * const spanner = new Spanner();
 *
 * const instance = spanner.instance('my-instance');
 * const database = instance.database('my-database');
 * const table = database.table('my-table');
 */
declare class Table {
    database: Database;
    name: string;
    constructor(database: Database, name: string);
    create(schema: Schema, gaxOptions?: CallOptions): Promise<CreateTableResponse>;
    create(schema: Schema, callback: CreateTableCallback): void;
    create(schema: Schema, gaxOptions: CallOptions, callback: CreateTableCallback): void;
    /**
     * Create a readable object stream to receive rows from the database using key
     * lookups and scans.
     *
     * @see [StreamingRead API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.Spanner.StreamingRead)
     * @see [ReadRequest API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.ReadRequest)
     *
     * @param {ReadRequest} query Configuration object, describing what to read from the table..
     * @param {TimestampBounds} [options] [Transaction options](https://cloud.google.com/spanner/docs/timestamp-bounds).
     * @returns {PartialResultStream} A readable stream that emits rows.
     *
     * @example
     * const {Spanner} = require('@google-cloud/spanner');
     * const spanner = new Spanner();
     *
     * const instance = spanner.instance('my-instance');
     * const database = instance.database('my-database');
     * const table = database.table('Singers');
     *
     * table.createReadStream({
     *     keys: ['1'],
     *     columns: ['SingerId', 'name']
     *   })
     *   .on('error', function(err) {})
     *   .on('data', function(row) {
     *     // row = {
     *     //   SingerId: '1',
     *     //   Name: 'Eddie Wilson'
     *     // }
     *   })
     *   .on('end', function() {
     *     // All results retrieved.
     *   });
     *
     * //-
     * // Provide an array for `query.keys` to read with a composite key.
     * //-
     * const query = {
     *   keys: [
     *     [
     *       'Id1',
     *       'Name1'
     *     ],
     *     [
     *       'Id2',
     *       'Name2'
     *     ]
     *   ],
     *   // ...
     * };
     *
     * //-
     * // If you anticipate many results, you can end a stream early to prevent
     * // unnecessary processing and API requests.
     * //-
     * table.createReadStream({
     *     keys: ['1'],
     *     columns: ['SingerId', 'name']
     *   })
     *   .on('data', function(row) {
     *     this.end();
     *   });
     */
    createReadStream(request: ReadRequest, options?: TimestampBounds): PartialResultStream;
    delete(gaxOptions?: CallOptions): Promise<DropTableResponse>;
    delete(callback: DropTableCallback): void;
    delete(gaxOptions: CallOptions, callback: DropTableCallback): void;
    deleteRows(keys: Key[], options?: DeleteRowsOptions | CallOptions): Promise<DeleteRowsResponse>;
    deleteRows(keys: Key[], callback: DeleteRowsCallback): void;
    deleteRows(keys: Key[], options: DeleteRowsOptions | CallOptions, callback: DeleteRowsCallback): void;
    drop(gaxOptions?: CallOptions): Promise<DropTableResponse>;
    drop(callback: DropTableCallback): void;
    drop(gaxOptions: CallOptions, callback: DropTableCallback): void;
    insert(rows: object | object[], options?: InsertRowsOptions | CallOptions): Promise<InsertRowsResponse>;
    insert(rows: object | object[], callback: InsertRowsCallback): void;
    insert(rows: object | object[], options: InsertRowsOptions | CallOptions, callback: InsertRowsCallback): void;
    read(request: ReadRequest, options?: TimestampBounds): Promise<ReadResponse>;
    read(request: ReadRequest, callback: ReadCallback): void;
    read(request: ReadRequest, options: TimestampBounds, callback: ReadCallback): void;
    replace(rows: object | object[], options?: ReplaceRowsOptions | CallOptions): Promise<ReplaceRowsResponse>;
    replace(rows: object | object[], callback: ReplaceRowsCallback): void;
    replace(rows: object | object[], options: ReplaceRowsOptions | CallOptions, callback: ReplaceRowsCallback): void;
    update(rows: object | object[], options?: UpdateRowsOptions | CallOptions): Promise<UpdateRowsResponse>;
    update(rows: object | object[], callback: UpdateRowsCallback): void;
    update(rows: object | object[], options: UpdateRowsOptions | CallOptions, callback: UpdateRowsCallback): void;
    upsert(rows: object | object[], options?: UpsertRowsOptions | CallOptions): Promise<UpsertRowsResponse>;
    upsert(rows: object | object[], callback: UpsertRowsCallback): void;
    upsert(rows: object | object[], options: UpsertRowsOptions | CallOptions, callback: UpsertRowsCallback): void;
    /**
     * Creates a new transaction and applies the desired mutation via
     * {@link Transaction#commit}.
     *
     * @see [Commit API Documentation](https://cloud.google.com/spanner/docs/reference/rpc/google.spanner.v1#google.spanner.v1.Spanner.Commit)
     *
     * @private
     *
     * @param {string} method CRUD method (insert, update, etc.).
     * @param {object|object[]} rows A map of names to values of data to insert
     *     into this table.
     * @param {function} callback The callback function.
     */
    private _mutate;
}
/**
 * Reference to the {@link Table} class.
 * @name module:@google-cloud/spanner.Table
 * @see Table
 */
export { Table };
